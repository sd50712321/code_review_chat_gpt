name: Code Review with ChatGPT

on:
  pull_request:
    branches:
      - main

jobs:
  code_review:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Get changed files
        id: changed_files
        run: |
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- 'src/**/*.js' 'src/**/*.ts')
          changed_files="${changed_files//$'\n'/ }"
          echo "Changed Files: $changed_files"
          echo "changed_files=$changed_files" >> $GITHUB_ENV

      - name: Code Review with ChatGPT
        id: code_review
        run: |
          file_list="${{ env.changed_files }}"
          IFS=' ' read -ra files_array <<< "$file_list" # 공백을 기준으로 문자열을 배열로 변환
          reviews=$(node code_review.js "${files_array[@]}") # 배열을 인수로 전달
          if [ -z "$reviews" ]; then
            echo "No reviews generated"
            echo "::set-output name=reviews::{}" # empty JSON object
          else
            echo "리뷰 결과:"
            echo "$reviews"
            echo "::set-output name=reviews::$reviews"
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Install jq
        run: sudo apt-get install jq

      - name: Debugging REVIEWS
        run: |
          echo 'REVIEWS:'
          echo "$REVIEWS" | jq .
        env:
          REVIEWS: ${{ steps.code_review.outputs.reviews }}

      - name: Add Code Review Comment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.API_TOKEN }}
          script: |
            const reviews = JSON.parse(process.env.REVIEWS);

            // PR의 커밋 목록 가져오기
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // 변경된 파일에 대한 리뷰만 남기기
            for (const [file, review] of Object.entries(reviews)) {
              console.log(`Processing file: ${file}`);
              console.log(`Review: ${review}`);

              let lastCommitSha;

              // 파일이 변경된 마지막 커밋 찾기
              for (const commit of commits) {
                console.log('commit', commit)
                const { data: commitData } = await github.rest.repos.getCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: commit.sha
                });
                console.log('commitData', commitData)
                const changedFile = commitData.files.find(f => f.filename === file);
                console.log('changedFile', changedFile)
                if (changedFile) {
                  console.log(`Changed file found: ${changedFile.filename}`);
                  lastCommitSha = commit.sha;
                  break;
                }
              }

              if (lastCommitSha) {
                const reviewComment = `${review}\n`;
                await github.rest.repos.createCommitComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  commit_sha: lastCommitSha,
                  body: `**File: ${file}**\n\n${reviewComment}`,
                });
              }
            }
        env:
          REVIEWS: ${{ steps.code_review.outputs.reviews }}
